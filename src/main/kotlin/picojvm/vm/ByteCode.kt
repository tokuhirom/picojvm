package picojvm.vm

enum class OperandType {
    SHORT_OP,
    BYTE_OP,
    NO_OP,
    UNKNOWN_OP
}

enum class ByteCode(val opcodeName: String, val opcode: Int, val description: String, val operandType: OperandType) {
    NOP("nop", 0, "Do nothing", OperandType.NO_OP),
    ACONST_NULL("aconst_null", 1, "Push null", OperandType.UNKNOWN_OP),
    ICONST_M1("iconst_m1", 2, "Push int constant -1", OperandType.UNKNOWN_OP),
    ICONST_0("iconst_0", 3, "Push int constant 0", OperandType.UNKNOWN_OP),
    ICONST_1("iconst_1", 4, "Push int constant 1", OperandType.UNKNOWN_OP),
    ICONST_2("iconst_2", 5, "Push int constant 2", OperandType.UNKNOWN_OP),
    ICONST_3("iconst_3", 6, "Push int constant 3", OperandType.UNKNOWN_OP),
    ICONST_4("iconst_4", 7, "Push int constant 4", OperandType.UNKNOWN_OP),
    ICONST_5("iconst_5", 8, "Push int constant 5", OperandType.UNKNOWN_OP),
    LCONST_0("lconst_0", 9, "Push long constant", OperandType.UNKNOWN_OP),
    LCONST_1("lconst_1", 10, "Push long constant", OperandType.UNKNOWN_OP),
    FCONST_0("fconst_0", 11, "Push float value 0.0", OperandType.UNKNOWN_OP),
    FCONST_1("fconst_1", 12, "Push float value 1.0", OperandType.UNKNOWN_OP),
    FCONST_2("fconst_2", 13, "Push float value 2.0", OperandType.UNKNOWN_OP),
    DCONST_0("dconst_0", 14, "Push double value 0.0", OperandType.UNKNOWN_OP),
    DCONST_1("dconst_1", 15, "Push double value 1.0", OperandType.UNKNOWN_OP),
    BIPUSH("bipush", 16, "Push byte", OperandType.UNKNOWN_OP),
    SIPUSH("sipush", 17, "Push short", OperandType.UNKNOWN_OP),
    LDC("ldc", 18, "Push item from constant pool", OperandType.BYTE_OP),
    LDC_W("ldc_w", 19, "Push item from constant pool (wide index)", OperandType.UNKNOWN_OP),
    LDC2_W("ldc2_w", 20, "Push long or double from constant pool (wide index)", OperandType.UNKNOWN_OP),
    ILOAD("iload", 21, "Load int from local variable", OperandType.UNKNOWN_OP),
    LLOAD("lload", 22, "Load long from local variable", OperandType.UNKNOWN_OP),
    FLOAD("fload", 23, "Load float from local variable", OperandType.UNKNOWN_OP),
    DLOAD("dload", 24, "Load double from local variable", OperandType.UNKNOWN_OP),
    ALOAD("aload", 25, "Load reference from local variable", OperandType.UNKNOWN_OP),
    ILOAD_0("iload_0", 26, "Load int from local variable", OperandType.UNKNOWN_OP),
    ILOAD_1("iload_1", 27, "Load int from local variable", OperandType.UNKNOWN_OP),
    ILOAD_2("iload_2", 28, "Load int from local variable", OperandType.UNKNOWN_OP),
    ILOAD_3("iload_3", 29, "Load int from local variable", OperandType.UNKNOWN_OP),
    LLOAD_0("lload_0", 30, "Load long from local variable 0", OperandType.UNKNOWN_OP),
    LLOAD_1("lload_1", 31, "Load long from local variable 1", OperandType.UNKNOWN_OP),
    LLOAD_2("lload_2", 32, "Load long from local variable 2", OperandType.UNKNOWN_OP),
    LLOAD_3("lload_3", 33, "Load long from local variable 3", OperandType.UNKNOWN_OP),
    FLOAD_0("fload_0", 34, "Load float from local variable 0", OperandType.UNKNOWN_OP),
    FLOAD_1("fload_1", 35, "Load float from local variable 1", OperandType.UNKNOWN_OP),
    FLOAD_2("fload_2", 36, "Load float from local variable 2", OperandType.UNKNOWN_OP),
    FLOAD_3("fload_3", 37, "Load float from local variable 3", OperandType.UNKNOWN_OP),
    DLOAD_0("dload_0", 38, "Load double from local variable 0", OperandType.UNKNOWN_OP),
    DLOAD_1("dload_1", 39, "Load double from local variable 1", OperandType.UNKNOWN_OP),
    DLOAD_2("dload_2", 40, "Load double from local variable 2", OperandType.UNKNOWN_OP),
    DLOAD_3("dload_3", 41, "Load double from local variable 3", OperandType.UNKNOWN_OP),
    ALOAD_0("aload_0", 42, "Load reference from local variable 0", OperandType.NO_OP),
    ALOAD_1("aload_1", 43, "Load reference from local variable 1", OperandType.UNKNOWN_OP),
    ALOAD_2("aload_2", 44, "Load reference from local variable 2", OperandType.UNKNOWN_OP),
    ALOAD_3("aload_3", 45, "Load reference from local variable 3", OperandType.UNKNOWN_OP),
    IALOAD("iaload", 46, "Load int from array", OperandType.UNKNOWN_OP),
    LALOAD("laload", 47, "Load long from array", OperandType.UNKNOWN_OP),
    FALOAD("faload", 48, "Load float from array", OperandType.UNKNOWN_OP),
    DALOAD("daload", 49, "Load double from array", OperandType.UNKNOWN_OP),
    AALOAD("aaload", 50, "Load reference from array", OperandType.UNKNOWN_OP),
    BALOAD("baload", 51, "Load byte or boolean from array", OperandType.UNKNOWN_OP),
    CALOAD("caload", 52, "Load char from array", OperandType.UNKNOWN_OP),
    SALOAD("saload", 53, "Load short from array", OperandType.UNKNOWN_OP),
    ISTORE("istore", 54, "Store int into local variable", OperandType.UNKNOWN_OP),
    LSTORE("lstore", 55, "Store long into local variable", OperandType.UNKNOWN_OP),
    FSTORE("fstore", 56, "Store float into local variable", OperandType.UNKNOWN_OP),
    DSTORE("dstore", 57, "Store double into local variable", OperandType.UNKNOWN_OP),
    ASTORE("astore", 58, "Store reference into local variable", OperandType.UNKNOWN_OP),
    ISTORE_0("istore_0", 59, "Store int into local variable 0", OperandType.UNKNOWN_OP),
    ISTORE_1("istore_1", 60, "Store int into local variable 1", OperandType.UNKNOWN_OP),
    ISTORE_2("istore_2", 61, "Store int into local variable 2", OperandType.UNKNOWN_OP),
    ISTORE_3("istore_3", 62, "Store int into local variable 3", OperandType.UNKNOWN_OP),
    LSTORE_0("lstore_0", 63, "Store long into local variable 0", OperandType.UNKNOWN_OP),
    LSTORE_1("lstore_1", 64, "Store long into local variable 1", OperandType.UNKNOWN_OP),
    LSTORE_2("lstore_2", 65, "Store long into local variable 2", OperandType.UNKNOWN_OP),
    LSTORE_3("lstore_3", 66, "Store long into local variable 3", OperandType.UNKNOWN_OP),
    FSTORE_0("fstore_0", 67, "Store float into local variable 0", OperandType.UNKNOWN_OP),
    FSTORE_1("fstore_1", 68, "Store float into local variable 1", OperandType.UNKNOWN_OP),
    FSTORE_2("fstore_2", 69, "Store float into local variable 2", OperandType.UNKNOWN_OP),
    FSTORE_3("fstore_3", 70, "Store float into local variable 3", OperandType.UNKNOWN_OP),
    DSTORE_0("dstore_0", 71, "Store double into local variable 0", OperandType.UNKNOWN_OP),
    DSTORE_1("dstore_1", 72, "Store double into local variable 1", OperandType.UNKNOWN_OP),
    DSTORE_2("dstore_2", 73, "Store double into local variable 2", OperandType.UNKNOWN_OP),
    DSTORE_3("dstore_3", 74, "Store double into local variable 3", OperandType.UNKNOWN_OP),
    ASTORE_0("astore_0", 75, "Store reference into local variable 0", OperandType.UNKNOWN_OP),
    ASTORE_1("astore_1", 76, "Store reference into local variable 1", OperandType.UNKNOWN_OP),
    ASTORE_2("astore_2", 77, "Store reference into local variable 2", OperandType.UNKNOWN_OP),
    ASTORE_3("astore_3", 78, "Store reference into local variable 3", OperandType.UNKNOWN_OP),
    IASTORE("iastore", 79, "Store into int array", OperandType.UNKNOWN_OP),
    LASTORE("lastore", 80, "Store into long array", OperandType.UNKNOWN_OP),
    FASTORE("fastore", 81, "Store into float array", OperandType.UNKNOWN_OP),
    DASTORE("dastore", 82, "Store into double array", OperandType.UNKNOWN_OP),
    AASTORE("aastore", 83, "Store into reference array", OperandType.UNKNOWN_OP),
    BASTORE("bastore", 84, "Store into byte or boolean array", OperandType.UNKNOWN_OP),
    CASTORE("castore", 85, "Store into char array", OperandType.UNKNOWN_OP),
    SASTORE("sastore", 86, "Store into short array", OperandType.UNKNOWN_OP),
    POP("pop", 87, "Pop the top operand stack value", OperandType.UNKNOWN_OP),
    POP2("pop2", 88, "Pop the top one or two operand stack values", OperandType.UNKNOWN_OP),
    DUP("dup", 89, "Duplicate the top operand stack value", OperandType.UNKNOWN_OP),
    DUP_X1("dup_x1", 90, "Duplicate the top operand stack value and insert two values down", OperandType.UNKNOWN_OP),
    DUP_X2("dup_x2", 91, "Duplicate the top operand stack value and insert two or three values down", OperandType.UNKNOWN_OP),
    DUP2("dup2", 92, "Duplicate the top one or two operand stack values", OperandType.UNKNOWN_OP),
    DUP2_X1("dup2_x1", 93, "Duplicate the top one or two operand stack values and insert two or three values down", OperandType.UNKNOWN_OP),
    DUP2_X2("dup2_x2", 94, "Duplicate the top one or two operand stack values and insert two, three, or four values down", OperandType.UNKNOWN_OP),
    SWAP("swap", 95, "Swap the top two operand stack values", OperandType.UNKNOWN_OP),
    IADD("iadd", 96, "Add int", OperandType.UNKNOWN_OP),
    LADD("ladd", 97, "Add long", OperandType.UNKNOWN_OP),
    FADD("fadd", 98, "Add float", OperandType.UNKNOWN_OP),
    DADD("dadd", 99, "Add double", OperandType.UNKNOWN_OP),
    ISUB("isub", 100, "Subtract int", OperandType.UNKNOWN_OP),
    LSUB("lsub", 101, "Subtract long", OperandType.UNKNOWN_OP),
    FSUB("fsub", 102, "Subtract float", OperandType.UNKNOWN_OP),
    DSUB("dsub", 103, "Subtract double", OperandType.UNKNOWN_OP),
    IMUL("imul", 104, "Multiply int", OperandType.UNKNOWN_OP),
    LMUL("lmul", 105, "Multiply long", OperandType.UNKNOWN_OP),
    FMUL("fmul", 106, "Multiply float", OperandType.UNKNOWN_OP),
    DMUL("dmul", 107, "Multiply double", OperandType.UNKNOWN_OP),
    IDIV("idiv", 108, "Divide int", OperandType.UNKNOWN_OP),
    LDIV("ldiv", 109, "Divide long", OperandType.UNKNOWN_OP),
    FDIV("fdiv", 110, "Divide float", OperandType.UNKNOWN_OP),
    DDIV("ddiv", 111, "Divide double", OperandType.UNKNOWN_OP),
    IREM("irem", 112, "Remainder int", OperandType.UNKNOWN_OP),
    LREM("lrem", 113, "Remainder long", OperandType.UNKNOWN_OP),
    FREM("frem", 114, "Remainder float", OperandType.UNKNOWN_OP),
    DREM("drem", 115, "Remainder double", OperandType.UNKNOWN_OP),
    INEG("ineg", 116, "Negate int", OperandType.UNKNOWN_OP),
    LNEG("lneg", 117, "Negate long", OperandType.UNKNOWN_OP),
    FNEG("fneg", 118, "Negate float", OperandType.UNKNOWN_OP),
    DNEG("dneg", 119, "Negate double", OperandType.UNKNOWN_OP),
    ISHL("ishl", 120, "Shift left int", OperandType.UNKNOWN_OP),
    LSHL("lshl", 121, "Shift left long", OperandType.UNKNOWN_OP),
    ISHR("ishr", 122, "Arithmetic shift right int", OperandType.UNKNOWN_OP),
    LSHR("lshr", 123, "Arithmetic shift right long", OperandType.UNKNOWN_OP),
    IUSHR("iushr", 124, "Logical shift right int", OperandType.UNKNOWN_OP),
    LUSHR("lushr", 125, "Logical shift right long", OperandType.UNKNOWN_OP),
    IAND("iand", 126, "Boolean AND int", OperandType.UNKNOWN_OP),
    LAND("land", 127, "Boolean AND long", OperandType.UNKNOWN_OP),
    IOR("ior", 128, "Boolean OR int", OperandType.UNKNOWN_OP),
    LOR("lor", 129, "Boolean OR long", OperandType.UNKNOWN_OP),
    IXOR("ixor", 130, "Boolean XOR int", OperandType.UNKNOWN_OP),
    LXOR("lxor", 131, "Boolean XOR long", OperandType.UNKNOWN_OP),
    IINC("iinc", 132, "Increment local variable by constant", OperandType.UNKNOWN_OP),
    I2L("i2l", 133, "Convert int to long", OperandType.UNKNOWN_OP),
    I2F("i2f", 134, "Convert int to float", OperandType.UNKNOWN_OP),
    I2D("i2d", 135, "Convert int to double", OperandType.UNKNOWN_OP),
    L2I("l2i", 136, "Convert long to int", OperandType.UNKNOWN_OP),
    L2F("l2f", 137, "Convert long to float", OperandType.UNKNOWN_OP),
    L2D("l2d", 138, "Convert long to double", OperandType.UNKNOWN_OP),
    F2I("f2i", 139, "Convert float to int", OperandType.UNKNOWN_OP),
    F2L("f2l", 140, "Convert float to long", OperandType.UNKNOWN_OP),
    F2D("f2d", 141, "Convert float to double", OperandType.UNKNOWN_OP),
    D2I("d2i", 142, "Convert double to int", OperandType.UNKNOWN_OP),
    D2L("d2l", 143, "Convert double to long", OperandType.UNKNOWN_OP),
    D2F("d2f", 144, "Convert double to float", OperandType.UNKNOWN_OP),
    I2B("i2b", 145, "Convert int to byte", OperandType.UNKNOWN_OP),
    I2C("i2c", 146, "Convert int to char", OperandType.UNKNOWN_OP),
    I2S("i2s", 147, "Convert int to short", OperandType.UNKNOWN_OP),
    LCMP("lcmp", 148, "Compare long", OperandType.UNKNOWN_OP),
    FCMPL("fcmpl", 149, "Compare float", OperandType.UNKNOWN_OP),
    FCMPG("fcmpg", 150, "Compare float", OperandType.UNKNOWN_OP),
    DCMPL("dcmpl", 151, "Compare double", OperandType.UNKNOWN_OP),
    DCMPG("dcmpg", 152, "Compare double", OperandType.UNKNOWN_OP),
    IFEQ("ifeq", 153, "Jump if int comparison with zero succeeds", OperandType.UNKNOWN_OP),
    IFNE("ifne", 154, "Jump if int comparison with zero succeeds", OperandType.UNKNOWN_OP),
    IFLT("iflt", 155, "Jump if int comparison with zero succeeds", OperandType.UNKNOWN_OP),
    IFGE("ifge", 156, "Jump if int comparison with zero succeeds", OperandType.UNKNOWN_OP),
    IFGT("ifgt", 157, "Jump if int comparison with zero succeeds", OperandType.UNKNOWN_OP),
    IFLE("ifle", 158, "Jump if int comparison with zero succeeds", OperandType.UNKNOWN_OP),
    IF_ICMPEQ("if_icmpeq", 159, "Jump if int comparison succeeds", OperandType.UNKNOWN_OP),
    IF_ICMPNE("if_icmpne", 160, "Jump if int comparison succeeds", OperandType.UNKNOWN_OP),
    IF_ICMPLT("if_icmplt", 161, "Jump if int comparison succeeds", OperandType.UNKNOWN_OP),
    IF_ICMPGE("if_icmpge", 162, "Jump if int comparison succeeds", OperandType.UNKNOWN_OP),
    IF_ICMPGT("if_icmpgt", 163, "Jump if int comparison succeeds", OperandType.UNKNOWN_OP),
    IF_ICMPLE("if_icmple", 164, "Jump if int comparison succeeds", OperandType.UNKNOWN_OP),
    IF_ACMPEQ("if_acmpeq", 165, "Jump if reference comparison succeeds", OperandType.UNKNOWN_OP),
    IF_ACMPNE("if_acmpne", 166, "Jump if reference comparison succeeds", OperandType.UNKNOWN_OP),
    GOTO("goto", 167, "Unconditional jump", OperandType.UNKNOWN_OP),
    JSR("jsr", 168, "Jump subroutine", OperandType.UNKNOWN_OP),
    RET("ret", 169, "Return from subroutine", OperandType.UNKNOWN_OP),
    TABLESWITCH("tableswitch", 170, "Access jump table by index and jump", OperandType.UNKNOWN_OP),
    LOOKUPSWITCH("lookupswitch", 171, "Access jump table by key match and jump", OperandType.UNKNOWN_OP),
    IRETURN("ireturn", 172, "Return int from method", OperandType.UNKNOWN_OP),
    LRETURN("lreturn", 173, "Return long from method", OperandType.UNKNOWN_OP),
    FRETURN("freturn", 174, "Return float from method", OperandType.UNKNOWN_OP),
    DRETURN("dreturn", 175, "Return double from method", OperandType.UNKNOWN_OP),
    ARETURN("areturn", 176, "Return reference from method", OperandType.UNKNOWN_OP),
    RETURN("return", 177, "Return void from method", OperandType.NO_OP),
    GETSTATIC("getstatic", 178, "Get static field from class", OperandType.SHORT_OP),
    PUTSTATIC("putstatic", 179, "Set static field in class", OperandType.UNKNOWN_OP),
    GETFIELD("getfield", 180, "Fetch field from object", OperandType.UNKNOWN_OP),
    PUTFIELD("putfield", 181, "Set field in object", OperandType.UNKNOWN_OP),
    INVOKEVIRTUAL("invokevirtual", 182, "Invoke instance method, dispatch based on class", OperandType.SHORT_OP),
    INVOKESPECIAL("invokespecial", 183, "Directly invoke instance (initialization) method of the current class or its supertypes", OperandType.SHORT_OP),
    INVOKESTATIC("invokestatic", 184, "Invoke static method", OperandType.UNKNOWN_OP),
    INVOKEINTERFACE("invokeinterface", 185, "Invoke interface method", OperandType.UNKNOWN_OP),
    INVOKEDYNAMIC("invokedynamic", 186, "Invoke a dynamically-computed call site", OperandType.UNKNOWN_OP),
    NEW("new", 187, "Create new object", OperandType.UNKNOWN_OP),
    NEWARRAY("newarray", 188, "Create new array", OperandType.UNKNOWN_OP),
    ANEWARRAY("anewarray", 189, "Create new array of reference", OperandType.UNKNOWN_OP),
    ARRAYLENGTH("arraylength", 190, "Get length of array", OperandType.UNKNOWN_OP),
    ATHROW("athrow", 191, "Throw Throwable reference", OperandType.UNKNOWN_OP),
    CHECKCAST("checkcast", 192, "Check whether reference is of given type", OperandType.UNKNOWN_OP),
    INSTANCEOF("instanceof", 193, "Determine if reference is of given type", OperandType.UNKNOWN_OP),
    MONITORENTER("monitorenter", 194, "Enter monitor for object", OperandType.UNKNOWN_OP),
    MONITOREXIT("monitorexit", 195, "Exit monitor for object", OperandType.UNKNOWN_OP),
    WIDE("wide", 196, "Extend local variable index by additional bytes", OperandType.UNKNOWN_OP),
    MULTIANEWARRAY("multianewarray", 197, "Create new multidimensional array", OperandType.UNKNOWN_OP),
    IFNULL("ifnull", 198, "Jump if reference is null", OperandType.UNKNOWN_OP),
    IFNONNULL("ifnonnull", 199, "Jump if reference not null", OperandType.UNKNOWN_OP),
    GOTO_W("goto_w", 200, "Unconditional jump (wide index)", OperandType.UNKNOWN_OP),
    JSR_W("jsr_w", 201, "Jump subroutine (wide index)", OperandType.UNKNOWN_OP),
    BREAKPOINT("breakpoint", 202, "Reserved for internal usage in debuggers", OperandType.UNKNOWN_OP),
    IMPDEP1("impdep1", 254, "Reserved for internal usage in JVM", OperandType.UNKNOWN_OP),
    IMPDEP2("impdep2", 255, "Reserved for internal usage in JVM", OperandType.UNKNOWN_OP);

    companion object {
        private val opcodeLookup = entries.associateBy(ByteCode::opcode)

        fun fromOpcode(opcode: Byte): ByteCode? {
            // kotlin の Byte は signed 8bit int なので、これを unsigned 8bit int として解釈しなおす
            return opcodeLookup[opcode.toInt() and 0xFF]
        }
    }
}
